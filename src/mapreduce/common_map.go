package mapreduce

import (
	"encoding/json"
	"hash/fnv"
	"io/ioutil"
	"os"
)

func doMap(
	jobName string, // the name of the MapReduce job
	mapTask int, // which map task this is
	inFile string,
	nReduce int, // the number of reduce task that will be run ("R" in the paper)
	mapF func(filename string, contents string) []KeyValue,
) {
	// There is one intermediate file per reduce task. The file name
	// includes both the map task number and the reduce task number. Use
	// the filename generated by reduceName(jobName, mapTask, r)
	// as the intermediate file for reduce task r. Call ihash() (see
	// below) on each key, mod nReduce, to pick r for a key/value pair.
	//
	// Look at Go's ioutil and os packages for functions to read
	// and write files.
	//
	// Coming up with a scheme for how to format the key/value pairs on
	// disk can be tricky, especially when taking into account that both
	// keys and values could contain newlines, quotes, and any other
	// character you can think of.
	// 如何format我们的键值对到磁盘上，这里可以用JSON的方式
	//
	// One format often used for serializing data to a byte stream that the
	// other end can correctly reconstruct is JSON. You are not required to
	// use JSON, but as the output of the reduce tasks *must* be JSON,
	// familiarizing yourself with it here may prove useful. You can write
	// out a data structure as a JSON string to a file using the commented
	// code below. The corresponding decoding functions can be found in
	// common_reduce.go.
	//
	//   enc := json.NewEncoder(file)
	//   for _, kv := ... {
	//     err := enc.Encode(&kv)
	//
	// Remember to close the file after you have written all the values!
	//
	// Your code here (Part I).
	// doMap要做的事情：
	// 1. 读取文件内容
	// 2. 用MapF处理文件 得到键值对数组
	// 3. 对键值对划分，产生nReduce个文件，如何写入这些文件的格式

	// 读取文件内容
	bytes, err := ioutil.ReadFile(inFile)
	if err != nil {
		panic(err)
	}

	// 获取mapF函数执行后的键值对
	s := string(bytes)
	kvs := mapF(inFile, s)

	// 提前打开和生成nReduce个文件
	var reduceFiles = make([]*os.File, nReduce)
	var jsonEncoders = make([]*json.Encoder, nReduce)
    for i := 0; i < nReduce; i++ {
		reduceFile, _ := os.Create(reduceName(jobName, mapTask, i))
		reduceFiles[i] = reduceFile
		jsonEncoders[i] = json.NewEncoder(reduceFile)
	}

	// 对键值对们遍历 看写到哪个reduce文件中
	for _, kv := range kvs {
		reduceIdx := ihash(kv.Key) % nReduce
		_ = jsonEncoders[reduceIdx].Encode(&kv)
	}

	// 关闭文件
	for _, file := range reduceFiles {
		_ = file.Close()
	}
}

func ihash(s string) int {
	h := fnv.New32a()
	h.Write([]byte(s))
	return int(h.Sum32() & 0x7fffffff)
}
